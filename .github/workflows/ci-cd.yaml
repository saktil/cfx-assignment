name: Monorepo CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: registry.digitalocean.com/cfx

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.filter.outputs.changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            go-service:
              - 'apps/go-service/**'
            node-service:
              - 'apps/node-service/**'

  build-and-push:
    needs: changes
    if: ${{ needs.changes.outputs.services != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.changes.outputs.services) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 1200

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/${{ matrix.service }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ matrix.service }}:latest
            ${{ env.REGISTRY }}/${{ matrix.service }}:${{ github.sha }}

  deploy:
    needs: [changes, build-and-push]
    if: ${{ needs.build-and-push.result == 'success' && needs.changes.outputs.services != '' }}
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save monorepo-k8s-cluster

      - name: Set up Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Update image tags
        run: |
          cd infra/kubernetes/overlays/production
          for service in ${{ join(fromJson(needs.changes.outputs.services), ' ') }}; do
            echo "Updating image tag for $service"
            kustomize edit set image ${{ env.REGISTRY }}/$service=${{ env.REGISTRY }}/$service:${{ github.sha }}
          done

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -k infra/kubernetes/overlays/production
          for service in ${{ join(fromJson(needs.changes.outputs.services), ' ') }}; do
            kubectl rollout status deployment/$service-deployment --timeout=300s
          done

      - name: Verify deployment
        run: |
          kubectl get pods -l environment=production
          kubectl get services